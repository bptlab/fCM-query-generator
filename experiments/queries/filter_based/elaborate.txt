val startTime = Time.now();
fun RiskHashigh n = (length(Mark.Main_Page'risk__HIGH 1 n) <> 0);
fun RiskHasmedium n = (length(Mark.Main_Page'risk__MEDIUM 1 n) <> 0);
fun RiskHaslow n = (length(Mark.Main_Page'risk__LOW 1 n) <> 0);
fun ClaimHasreceived n = (length(Mark.Main_Page'claim__RECEIVED 1 n) <> 0);
fun ClaimHasapproved n = (length(Mark.Main_Page'claim__APPROVED 1 n) <> 0);
fun ClaimHasin_question n = (length(Mark.Main_Page'claim__IN_QUESTION 1 n) <> 0);
fun ClaimHasrejected n = (length(Mark.Main_Page'claim__REJECTED 1 n) <> 0);
fun ClaimHasrejection_sent n = (length(Mark.Main_Page'claim__REJECTION_SENT 1 n) <> 0);
fun ClaimHasdisbursed n = (length(Mark.Main_Page'claim__DISBURSED 1 n) <> 0);
fun AssessmentHasrequested n = (length(Mark.Main_Page'assessment__REQUESTED 1 n) <> 0);
fun AssessmentHasrejected n = (length(Mark.Main_Page'assessment__REJECTED 1 n) <> 0);
fun AssessmentHascreated n = (length(Mark.Main_Page'assessment__CREATED 1 n) <> 0);
fun AssessmentHasimproved n = (length(Mark.Main_Page'assessment__IMPROVED 1 n) <> 0);
fun AssessmentHasapproved n = (length(Mark.Main_Page'assessment__APPROVED 1 n) <> 0);
fun AdviceHasapprove n = (length(Mark.Main_Page'advice__APPROVE 1 n) <> 0);
fun AdviceHasreject n = (length(Mark.Main_Page'advice__REJECT 1 n) <> 0);
fun isassess_riskEnabled n = (if length(OutArcs(n)) <> 0 then
            (List.exists(fn arc => ArcToTI(arc) = (TI.assess_risk'assess_risk_0 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.assess_risk'assess_risk_1 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.assess_risk'assess_risk_2 1)) (OutArcs(n)))
else false);
fun isdecide_on_claimEnabled n = (if length(OutArcs(n)) <> 0 then
            (List.exists(fn arc => ArcToTI(arc) = (TI.decide_on_claim'decide_on_claim_0 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.decide_on_claim'decide_on_claim_1 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.decide_on_claim'decide_on_claim_2 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.decide_on_claim'decide_on_claim_3 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.decide_on_claim'decide_on_claim_4 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.decide_on_claim'decide_on_claim_5 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.decide_on_claim'decide_on_claim_6 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.decide_on_claim'decide_on_claim_7 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.decide_on_claim'decide_on_claim_8 1)) (OutArcs(n)))
else false);
fun isrequest_expert_assessmentEnabled n = (if length(OutArcs(n)) <> 0 then
            (List.exists(fn arc => ArcToTI(arc) = (TI.request_expert_assessment'request_expert_assessment_0 1)) (OutArcs(n)))
else false);
fun iscreate_assessmentEnabled n = (if length(OutArcs(n)) <> 0 then
            (List.exists(fn arc => ArcToTI(arc) = (TI.create_assessment'create_assessment_0 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.create_assessment'create_assessment_1 1)) (OutArcs(n)))
else false);
fun isreview_assessmentEnabled n = (if length(OutArcs(n)) <> 0 then
            (List.exists(fn arc => ArcToTI(arc) = (TI.review_assessment'review_assessment_0 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.review_assessment'review_assessment_1 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.review_assessment'review_assessment_2 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.review_assessment'review_assessment_3 1)) (OutArcs(n)))
else false);
fun isreassess_claimEnabled n = (if length(OutArcs(n)) <> 0 then
            (List.exists(fn arc => ArcToTI(arc) = (TI.reassess_claim'reassess_claim_0 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.reassess_claim'reassess_claim_1 1)) (OutArcs(n)))
else false);
fun isrevise_decisionEnabled n = (if length(OutArcs(n)) <> 0 then
            (List.exists(fn arc => ArcToTI(arc) = (TI.revise_decision'revise_decision_0 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.revise_decision'revise_decision_1 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.revise_decision'revise_decision_2 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.revise_decision'revise_decision_3 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.revise_decision'revise_decision_4 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.revise_decision'revise_decision_5 1)) (OutArcs(n)))
else false);
fun isreject_claimEnabled n = (if length(OutArcs(n)) <> 0 then
            (List.exists(fn arc => ArcToTI(arc) = (TI.reject_claim'reject_claim_0 1)) (OutArcs(n)))
else false);
fun isdisburse_claimEnabled n = (if length(OutArcs(n)) <> 0 then
            (List.exists(fn arc => ArcToTI(arc) = (TI.disburse_claim'disburse_claim_0 1)) (OutArcs(n)))
else false);
fun isreassess_riskEnabled n = (if length(OutArcs(n)) <> 0 then
            (List.exists(fn arc => ArcToTI(arc) = (TI.reassess_risk'reassess_risk_0 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.reassess_risk'reassess_risk_1 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.reassess_risk'reassess_risk_2 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.reassess_risk'reassess_risk_3 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.reassess_risk'reassess_risk_4 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.reassess_risk'reassess_risk_5 1)) (OutArcs(n))  orelse
List.exists(fn arc => ArcToTI(arc) = (TI.reassess_risk'reassess_risk_6 1)) (OutArcs(n)))
else false);
fun evaluateState n = (isdisburse_claimEnabled(n) andalso RiskHaslow(n)  );
val Objective = POS(NF("Query_4", evaluateState));
val initialState = 1;
fun evaluateNode a = 
    let val destNode = DestNode(a)
    in eval_node Objective destNode
  end
  val nextArcs: int list ref = ref [];
  val results: (TI.TransInst * bool) list ref = ref([]);
  nextArcs := OutArcs(initialState);
  results := List.map(fn (action) => (
      (ArcToTI(action), evaluateNode(action) )
  ))(!nextArcs);
  results;

val endTime = Time.now();
Time.toMilliseconds(endTime) - Time.toMilliseconds(startTime)

